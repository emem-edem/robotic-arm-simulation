# -*- coding: utf-8 -*-
"""RL_Robotic_Simulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ylCW1kFH7WYpq8kBpr5zIU3cWKEPKHnb

## **SAC Agent playing PandaReachDense-v3**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !apt install python-opengl
# !apt install ffmpeg
# !apt install xvfb
# !pip3 install pyvirtualdisplay

# Virtual display
from pyvirtualdisplay import Display

virtual_display = Display(visible=0, size=(1400, 900))
virtual_display.start()

!pip install stable-baselines3[extra]
!pip install gymnasium

!pip install huggingface_sb3
!pip install huggingface_hub
!pip install panda_gym

#Importing the Packages

import os

import gymnasium as gym
import panda_gym

from huggingface_sb3 import load_from_hub, package_to_hub

# Importing the SAC module
from stable_baselines3 import SAC
from stable_baselines3.common.callbacks import CheckpointCallback
from stable_baselines3.common.evaluation import evaluate_policy
from stable_baselines3.common.vec_env import DummyVecEnv, VecNormalize
from stable_baselines3.common.env_util import make_vec_env

from huggingface_hub import notebook_login

# Create the environment

env_id = "PandaReachDense-v3"

# Create the env
env = gym.make(env_id)

# Get the state space and action space
s_size = env.observation_space.shape
a_size = env.action_space

# Get a random observation

print("_____OBSERVATION SPACE_____ \n")
print("The State Space is: ", s_size)
print("Sample observation", env.observation_space.sample())

# Take a random action

print("\n _____ACTION SPACE_____ \n")
print("The Action Space is: ", a_size)
print("Action Space Sample", env.action_space.sample())

env = make_vec_env(env_id, n_envs=4)

# Adding this wrapper to normalize the observation and the reward
env = VecNormalize(env, norm_reward=True)

# Using the learning rate of 0.01

checkpoint_callback = CheckpointCallback(save_freq=10000, save_path='./logs/', name_prefix='sac_model')
learning_rate = 1e-2 #0.01
model = SAC('MultiInputPolicy', env, learning_rate=learning_rate, verbose=1)

# Training the model
model.learn(1_000_000)

# Save the model and  VecNormalize statistics when saving the agent
model.save("SAC-PandaReachDense-v3")
env.save("vec_normalize.pkl")

from stable_baselines3.common.vec_env import DummyVecEnv, VecNormalize

# Load the saved statistics
eval_env = DummyVecEnv([lambda: gym.make("PandaReachDense-v3")])
eval_env = VecNormalize.load("vec_normalize.pkl", eval_env)

# We need to override the render_mode
eval_env.render_mode = "rgb_array"

# Set the training to False
eval_env.training = False
eval_env.norm_reward = False


model = SAC.load("SAC-PandaReachDense-v3")

mean_reward, std_reward = evaluate_policy(model, eval_env)

print(f"Mean reward = {mean_reward:.2f} +/- {std_reward:.2f}")

notebook_login()
!git config --global credential.helper store

from huggingface_sb3 import package_to_hub

package_to_hub(
    model=model,
    model_name=f"SAC-{env_id}",
    model_architecture="SAC",
    env_id=env_id,
    eval_env=eval_env,
    repo_id=f"ememedem/SAC-{env_id}", # Change the username
    commit_message="Initial commit",
)

